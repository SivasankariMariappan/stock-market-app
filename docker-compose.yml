version: "3"
services:
  api-database:
    image: mongo:latest
    container_name: api-database
    ports:
      - 27017:27017
    volumes:
      - ./database:/data
    networks:
      - back-tier

  front-end:
    build:
      context: ./stock-market-react
      dockerfile: dockerfile
    ports:
      - 5000:3000
    networks:
      - front-tier
      - back-tier

  api:
    build:
      context: ./stock-market-api
      dockerfile: dockerfile
    container_name: springboot
    ports:
      - 9091:8080
      - 9094:8090
    volumes:
      - ./containerLogs:/logs
    networks:
      - front-tier
      - back-tier
      - elk
    depends_on:
      - logstash

  prometheus:
    image: "prom/prometheus"
    ports:
      - 9090:9090
    volumes:
      - ./stock-market-api/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    links:
      - api:springboot
    depends_on:
      - api
    networks:
      - back-tier

  grafana:
    image: "grafana/grafana"
    ports:
      - 3000:3000

  # Kafka Server & Zookeeper Docker Image
  kafkaserver:
    image: "spotify/kafka:latest"
    container_name: kafka
    # Configures docker image to run in bridge mode network
    hostname: kafkaserver
    networks:
      - elk
    # Make a port available to services outside of Docker
    ports:
      - 2181:2181
      - 9092:9092
    environment:
      ADVERTISED_HOST: kafkaserver
      ADVERTISED_PORT: 9092

  # Kafka Manager docker image, it is a web based tool for managing Apache Kafka.
  kafka_manager:
    image: "mzagar/kafka-manager-docker:1.3.3.4"
    container_name: kafkamanager
    #configures the kafka manager docker image to run in bridge mode network
    networks:
      - elk
    # Make a port available to services outside of Docker
    ports:
      - 9000:9000
    # It Links kafka_manager container to kafkaserver container to communicate.
    links:
      - kafkaserver:kafkaserver
    environment:
      ZK_HOSTS: "kafkaserver:2181"

  elasticsearch:
    build:
      context: ./elk/elasticsearch
      dockerfile: Dockerfile
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - XPACK_SECURITY_ENABLED=false
      - XPACK_REPORTING_ENABLED=false
      - XPACK_MONITORING_ENABLED=false
      - "ES_JAVA_OPTS=-Xms750m -Xmx750m"
    networks:
      - elk

  logstash:
    build:
      context: ./elk/logstash
      dockerfile: Dockerfile
    container_name: logstash
    command: -f /etc/logstash/conf.d/
    volumes:
      - ./elk/logstash/config:/etc/logstash/conf.d
    # It Links elasticsearch container & kafkaserver container  & logstash container to communicate
    links:
      - elasticsearch:elasticsearch
      - kafkaserver:kafkaserver
    ports:
      - "9999:9999"
    environment:
      - XPACK_SECURITY_ENABLED=false
      - XPACK_REPORTING_ENABLED=false
      - XPACK_MONITORING_ENABLED=false
    depends_on:
      - elasticsearch
      - kafkaserver
    networks:
      - elk

  kibana:
    build:
      context: ./elk/kibana
      dockerfile: Dockerfile
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./elk/kibana/config/:/opt/kibana/config/
    ports:
      - "5601:5601"
    # It Links kibana container & elasticsearch container to communicate
    links:
      - elasticsearch:elasticsearch
    depends_on:
      - elasticsearch
    networks:
      - elk

  sonarqube:
    image: sonarqube:latest
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    ports:
      - 9093:9000

networks:
  front-tier:
  back-tier:
  elk:
    driver: bridge
